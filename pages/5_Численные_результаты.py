import streamlit as st
from PIL import Image
import os.path

# path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig3.jpg')

menu = st.sidebar.radio('***',
    (
    'Адвекция','Уравнение Бюргерса','Нестационарные сжимаемые уравнения Эйлера'
     )
)

if menu == 'Адвекция':
    st.markdown(r'''
    ### Линейная адвекция

    $\dfrac{\partial}{\partial t} U(x,t) + \dfrac{\partial}{\partial x_j} (U(x,t)\beta_j(x)) = 0 \hskip{3cm}$ для $x \in \Omega, t \in [0,T]$

    $U(x,0) = \overline{U}(x) \hskip{3cm}$ для $x \in \Omega$
    

    #### 1D
    $\beta : x \mapsto 1+ \dfrac{1}{2} sin^2(2\pi x)$

    c начальным условием

    $\overline{U}(x) = sin (\pi x) \hskip{3cm} if x \leqslant 0.5$

    $\overline{U}(x) = sin (\pi (x-1)) \hskip{2.1cm} if x > 0.5$

    и периодические граничные условия.

    Мы инициализируем с помощью сетки опорной области Ω_0 = [ 0 , 1 ], которую мы строим таким образом, что интерфейс элемента находится в начальном месте удара (x = 0,5), т.е. отслеживается удар в начальном состоянии. Решение для отслеживания удара вычисляется с использованием дискретизации DG на этой равнораспределенной сетке с 20 элементами степени p = 4, q = 1 и временной дискретизации DIRK с 25 временными шагами с конечным временем T = 0,25 (рис. 4). Решатель SQP используется с точностью ϵ 1 = 10-6 и ϵ 2 = 10-8 . 

    ''')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig4.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption='Рис. Метод линейного решения одномерного, изменяющегося в пространстве уравнения адвекции с p = 4,q = 1. Начальное условие U ( x) и отслеживающее решение в моменты времени t = 0,05,0,15,0,25')

    st.markdown(r'''
    На каждом временном шаге $n + 1$ мы можем получить решение в пределах заданной точности, что соответствует решению задачи оптимизации на временном шаге n и этапе s, и для этого требуется всего 2-3 итерации SQP-решателя (рис. 5). Обратите внимание, что этап sth, как правило, более сложен для решателя SQP – одно из возможных объяснений заключается в том, что каждый этап метода DIRK имеет низкий порядок (первый порядок), что упрощает работу решателя SQP по сравнению со этапом sth, который на самом деле является решением высокого порядка из-за нашего особый выбор схем DIRK. 
    
    ''')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig5.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption='Рис. Конечное сходящееся значение ограничения (вверху слева), условия оптимальности (вверху справа) и целевой функции (внизу слева) для решения одномерной пространственно изменяющейся адвекции на каждом временном шаге и заданных допусков, а также количество шагов SQP, необходимых на каждом этапе каждого временного шага для сходимости (внизу справа); стадия 1: , стадия 2 , стадия 3')

    st.markdown(r'''
    Мы получаем эталонное решение при T = 0,25, используя метод характеристик; характеристические уравнения и соответствующее решение интегрируются с использованием классического RK4 с 10 000 временными шагами. Решение для отслеживания ударной волны хорошо сравнивается с эталонным решением в конечное время T = 0,25 (рис. 6). Мы используем это эталонное решение, чтобы продемонстрировать сходимость высокого порядка во времени как для ошибки L1 решения в конечное время, так и для местоположения удара, проверяя расчетный порядок точности схем Рунге-Кутты даже при наличии разрыва (рис. 7).
    
    ''')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig6.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption='Рис 6. Сравнение результатов отслеживания удара и эталонных решений при T = 0,25.')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig7.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption='Рис 7. Временная сходимость схем DIRK1, DIRK2 и DIRK3 для ошибки L1 определения местоположения ударной волны (слева) и решения (справа) для пространственно меняющегося уравнения адвекции.')

if menu == 'Уравнение Бюргерса':
    st.markdown(r'''
    ### Уравнение Бюргерса
    $\dfrac{\partial}{\partial t}U(x,t) + \dfrac{\partial}{\partial x_j}(\dfrac{1}{2}U(x,t)^2 \beta_j) = 0$

    $U(x,t) = 0 \hskip{3cm} x \in \partial \Omega$

    $U(x,0) = \overline{U}(x)$

    #### 1D
    $\beta = 1$

    и начальное условие $\overline{U}: \Omega \to \mathbb{R}$

    $\overline{U}: x \mapsto 2 (x+1)^2 (1-H(x))$
    где $H:\mathbb{R} \mapsto $ {0,1} - функция Хевисайда

    Наш подход требует только сетки опорной области $Ω_0$ = [ − 1 , 1 ], которую мы строим таким образом, чтобы граница раздела элементов находилась в начальной точке удара (x = 0), т.е. отслеживается удар в начальном состоянии. Решение для отслеживания удара вычисляется с использованием дискретизации DG на этой равнораспределенной сетке с 20 элементами степени p = 4, q = 1 и временной дискретизации DIRK3 с 20 временными шагами с конечным временем T = 1 (рис. 8).

    ''')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig8.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption=r'Рис 8. Решение методом прямых одномерного, невязкого уравнения Бюргерса с p = 4,q = 1, включая начальное условие и отслеживание решения в моменты времени t = 0.05,0.35,0.65,0.95')

    st.markdown(r'''
    ### 2D
    $\partial \Omega = [-1,1]$ в качестве двумерной области, $\beta = (1,0)$ в качестве направления потока и $U$

    Начальное условие:
    
    $\overline{U}:(x_1,x_2) \mapsto (0.5 - 2(x^2_2 - 0.25)) (\frac{4}{3}(x_1 + 0.75)) \hskip{3cm} x \in \Omega_{\Box} $

    $\hskip{5cm} 0 \hskip{3cm}$ в другом случае

    где $\Omega_{\Box} := [-0.75,0] \times [-0.5,0.5]$

    Задача построена таким образом, что первоначально прямая ударная волна изгибается со временем, что отслеживается сеткой высокого порядка. Решение для отслеживания ударов вычисляется с использованием дискретизации DG на сетке со 128 симплексными элементами степени p = 2, q = 2 и временной дискретизации DIRK3 с 40 временными шагами с конечным временем T = 2 (рис. 9).
    
    ''')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig9.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption='Рис. 9. Метод линейного решения двумерного невязкого уравнения Бюргерса с p = q = 2. Начальное условие U ( x) (слева) и решение при T = 2 (справа)')

if menu == 'Нестационарные сжимаемые уравнения Эйлера':
    st.markdown(r'''
    ### Нестационарные сжимаемые уравнения Эйлера
    Система уравнений для течений невязкой сжимаемой жидкости в области $\Omega \in \mathbb{R}^d$

    $\dfrac{\partial}{\partial t} \rho(x,t) + \dfrac{\partial}{\partial x_j} (\rho(x,t)v_j(x,t)) = 0$


    $\dfrac{\partial}{\partial t} (\rho(x,t)v_i(x,t)) + 
    \dfrac{\partial}{\partial x_j} (\rho(x,t)v_i(x,t)v_j(x,t) + P(x,t)\delta_{ij}) = 0 $

    $\dfrac{\partial}{\partial t} (\rho(x,t)E(x,t)) + 
    \dfrac{\partial}{\partial x_j} ([\rho(x,t)E(x,t) + P(x,t)]v_j{x,t}) = 0 $

    где $\rho$ - плотность жидкости; $v_i$ - скорость жидкости по направлению $x_i$; E - полная энергия жидкости.

    Для калорической идеальной жидкости, давление связано с энергией по закону идеального газа:

    $ P = (\gamma-1)(\rho E - \dfrac{\rho v_i v_j}{2})$ где $\gamma$ - отношение удельных теплоемкостей.
    
    Путем комбинирования плостности, импульса и энергии в вектор в консервативных переменных $U:\Omega \times[0,T] \to \mathbb{R}^{d+2}$

     
    

    ''')


    st.markdown(r'''
    #### Ударная волна
    Рассматривается задача о сферической взрывной волне, характеризующейся сильным, расширяющимся в радиальном направлении ударом.
    Задача вдохновлена классической задачей Седова, которая представляет собой идеализированную модель самоподобной эволюции цилиндрической (или сферической) взрывной волны, начинающейся с большой суммарной энергии, накопленной в одной точке, помещенной в однородную среду однородной плотности при незначительном давлении. Задача Седова является верификационным тестом для традиционных методов отслеживания ударных волн, поскольку существует аналитическое решение, доступное в одно-, двух- и трехмерном измерениях для сравнения. В основном он используется для проверки геометрических характеристик, таких как способность отслеживать изогнутый удар и сохранять сферическую симметрию. Область $Ω = [-1,1]$ в качестве двумерной пространственной области с начальным условием, заданным в терминах плотности, скорости и давления в зависимости от расстояния от начала координат

    $r = \sqrt{x_1^2 + x_2^2}$ где 

    $ \rho = \dfrac{5.378}{0.25^2} r^2 \hskip{3cm} r\le 0.25$

    $ \rho = 1 \hskip{4cm}$ иначе

    $v(r) = \dfrac{1.304}{0.25}r \hskip{3cm} r \le 0.25$

    $ v(r) = 0 \hskip{4cm}$ иначе

    $P(r) = \dfrac{0.978}{0.25^2} r^2 + 1 \hskip{3cm} r \le 0.25$

    $ P(r) = 10^{-3} \hskip{4cm} иначе$ 


    Начальное условие строится таким образом, чтобы ударная волна была точно сцеплена с сеткой. Это начальное условие вдохновлено решением задачи Седова в то время, когда примитивные переменные уже приобрели “чашеобразную” структуру. Решение для отслеживания удара вычисляется с использованием дискретизации DG на сетке с 422 симплексными элементами степени p = 2, q = 2 и временной дискретизации DIRK2 со 140 временными шагами и конечным временем T = 0,14 (рис. 12). В системе отслеживания ударов способность точно отслеживать криволинейные удары при сохранении радиальной симметрии является очень естественной. Поскольку начальное значение давления в области окружающей среды близко к нулю и намного меньше значения внутри ударной волны, в решатель SQP была внесена небольшая модификация, чтобы избежать отрицательных значений энергии в области окружающей среды. После каждого шага SQP элементы в области окружающей среды с отрицательным значением энергии повторно инициализируются с их средним значением по элементам. Это помогает стабилизировать решатель на начальных итерациях, после чего он быстро сходится.

    
    ''')

    path_to_image= os.path.join(os.path.dirname(__file__), './images', 'fig12.jpg')

    st.image(Image.open(path_to_image),use_column_width = True,caption='Рис. 12. Метод линейного решения двумерной задачи о взрывной волне с p = q = 2. Начальное условие U ( x) (слева) и решение при T = 0,14 (справа).')


    st.write(r'''
    Первым вопросом, который следует рассмотреть, является образование ударной волны, наиболее часто иллюстрируемое эволюцией уравнения Бюргерса во времени из гладкого начального условия или увеличением крутизны волн, следующих за ударной волной, в задаче Шу-Ошера. Неявное отслеживание ударов обладает потенциалом для четкого формирования и последующего отслеживания ударов благодаря своему r-адаптивному поведению и оптимизационной формулировке, которая неявно отслеживает удары и одновременно разрешает поток; это было показано авторами метода MDG-ICE для невязких и вязкостных ударов в пространственно-временной постановке. В отличие от этого, подходы к отслеживанию ударов, которые явно обрабатывают удары, не всегда демонстрируют потенциал для обработки образования ударов без существенной специализации. Другим направлением могло бы быть включение изменений топологии, таких как перевороты краев, уточнение и огрубление. В этой работе мы используем фиксированную топологию сетки, поскольку наш удар перемещается по области. Это ограничивает нашу способность точно определять плавный поток в определенных областях, которые имеют только фиксированное разрешение сетки, чтобы представлять все большую часть пространственной области с течением времени. Проблема несколько усугубляется тем фактом, что изначально мы работаем с очень грубыми сетками
    ''')

